import requests
from bs4 import BeautifulSoup
import re

# SQL Injection check by testing for error-based injections
def check_sql_injection(url):
    payload = "' OR '1'='1"
    try:
        response = requests.get(url, params={'id': payload})
        sql_errors = [
            "you have an error in your sql syntax",
            "unclosed quotation mark",
            "sql syntax error",
            "Warning: mysql",
            "Warning: pg_query"
        ]
        for error in sql_errors:
            if error.lower() in response.text.lower():
                return "Vulnerable (Potential SQL Injection)"
        return "Not Vulnerable (Basic Check)"
    except requests.exceptions.RequestException as e:
        return f"Error checking SQL Injection: {str(e)}"

# Cross-Site Scripting (XSS) check
def check_xss(url):
    xss_payload = "<script>alert('XSS')</script>"
    try:
        response = requests.get(url, params={'q': xss_payload})
        if xss_payload in response.text:
            return "Vulnerable (Potential XSS)"
        else:
            return "Not Vulnerable (Basic Check)"
    except requests.exceptions.RequestException as e:
        return f"Error checking XSS: {str(e)}"

# Cross-Site Request Forgery (CSRF) check
def check_csrf(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        for form in forms:
            if form.find('input', {'name': re.compile(r'csrf', re.IGNORECASE)}):
                return "Not Vulnerable (CSRF Token Detected)"
        return "Vulnerable (Potential CSRF - No Token Found)"
    except requests.exceptions.RequestException as e:
        return f"Error checking CSRF: {str(e)}"

# Open Redirect check
def check_open_redirect(url):
    open_redirect_payload = "https://evil.com"
    try:
        response = requests.get(url, params={'redirect': open_redirect_payload})
        if open_redirect_payload in response.url:
            return "Vulnerable (Potential Open Redirect)"
        else:
            return "Not Vulnerable (Basic Check)"
    except requests.exceptions.RequestException as e:
        return f"Error checking Open Redirect: {str(e)}"

# Main function to run all checks
def run_vulnerability_checks(url):
    print(f"SQL Injection Check: {check_sql_injection(url)}")
    print(f"XSS Check: {check_xss(url)}")
    print(f"CSRF Check: {check_csrf(url)}")
    print(f"Open Redirect Check: {check_open_redirect(url)}")

if __name__ == "__main__":
    test_url = "http://example.com"
    run_vulnerability_checks(test_url)
